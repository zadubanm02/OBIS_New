{"version":3,"sources":["logo.svg","Encryption.jsx","Decryption.jsx","Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Encryption","state","message","key","encryptedMessage","decryptedMessage","isLoading","isLoaded","_id","messageForDecryption","decryptionKey","handleChange","e","setState","target","name","value","postDataToDatabase","preventDefault","axios","post","then","response","console","log","data","get","res","encryptedData","cryptojs","AES","encrypt","toString","this","className","onSubmit","class","id","type","onChange","for","style","backgroundColor","borderBottom","React","Component","Decryption","decrypt","enc","Utf8","Footer","color","textAlign","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.cd01af35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport cryptojs from \"crypto-js\";\nimport axios from \"axios\";\n\nexport default class Encryption extends React.Component {\n  state = {\n    message: \"\",\n    key: \"\",\n    encryptedMessage: \"\",\n    decryptedMessage: \"\",\n    isLoading: false,\n    isLoaded: false,\n    _id: \"\",\n    messageForDecryption: \"\",\n    decryptionKey: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  postDataToDatabase = e => {\n    e.preventDefault();\n    const { message, key, _id } = this.state;\n    this.setState({ isLoading: true });\n    axios\n      .post(\"http://localhost:8000/messages\", { message, key })\n      .then(this.setState({ isLoading: false }))\n      .then(response => {\n        console.log(response);\n        console.log(response.data);\n        console.log(response.data._id);\n        this.setState({ _id: response.data._id });\n        axios\n          .get(`http://localhost:8000/messages/${this.state._id}`)\n          .then(res => {\n            console.log(res.data);\n            const encryptedData = res.data;\n            this.setState({\n              encryptedMessage: cryptojs.AES.encrypt(\n                encryptedData.message,\n                encryptedData.key\n              ).toString()\n            });\n          });\n      });\n  };\n\n  render() {\n    const { encryptedMessage, decryptedMessage, _id } = this.state;\n    return (\n      <div>\n        <div className=\"card-panel grey lighten-5\">\n          <form onSubmit={this.postDataToDatabase}>\n            <div class=\"input-field col s6\">\n              <input\n                id=\"message\"\n                type=\"text\"\n                name=\"message\"\n                onChange={this.handleChange}\n              />\n              <label for=\"message\">Message</label>\n            </div>\n            <div class=\"input-field col s6\">\n              <input\n                id=\"key\"\n                type=\"text\"\n                name=\"key\"\n                onChange={this.handleChange}\n              />\n              <label for=\"key\">Key</label>\n            </div>\n            <label>Kľúč, podľa ktorého sa zašifruje tvoja správa</label>\n            <br />\n            <input\n              type=\"submit\"\n              value=\"Zašifrovať\"\n              class=\"btn  waves-light\"\n              style={{ backgroundColor: \"#EE6E73\" }}\n            />\n          </form>\n        </div>\n        <div>\n          <div\n            class=\"card-panel grey lighten-5\"\n            style={{ borderBottom: \"1px solid #EE6E73\" }}\n          >\n            Zašifrovaná správa : {encryptedMessage}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport cryptojs from \"crypto-js\";\nimport axios from \"axios\";\n\nexport default class Decryption extends React.Component {\n  state = {\n    message: \"\",\n    key: \"\",\n    decryptedMessage: \"\",\n    _id: \"\",\n    messageForDecryption: \"\",\n    decryptionKey: \"\",\n    isLoading: false\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n    console.log(this.state);\n  };\n\n  postDataToDatabase = e => {\n    e.preventDefault();\n    const { message, key, _id } = this.state;\n    this.setState({ isLoading: true });\n    axios\n      .post(\"http://localhost:8000/messages\", {\n        message,\n        key\n      })\n      .then(this.setState({ isLoading: false }))\n      .then(response => {\n        console.log(response);\n        console.log(response.data);\n        console.log(response.data._id);\n        this.setState({ _id: response.data._id });\n        axios\n          .get(`http://localhost:8000/messages/${this.state._id}`)\n          .then(res => {\n            console.log(res.data);\n            const encryptedData = res.data;\n            this.setState({\n              decryptedMessage: cryptojs.AES.decrypt(\n                encryptedData.message,\n                encryptedData.key\n              ).toString(cryptojs.enc.Utf8)\n            });\n          });\n      });\n  };\n\n  render() {\n    const { encryptedMessage, decryptedMessage, _id } = this.state;\n    return (\n      <div>\n        <div className=\"card-panel grey lighten-5\">\n          <form onSubmit={this.postDataToDatabase}>\n            <div class=\"input-field col s6\">\n              <input\n                id=\"message\"\n                type=\"text\"\n                name=\"message\"\n                onChange={this.handleChange}\n              />\n              <label for=\"message\">Encypted Message</label>\n            </div>\n            <div class=\"input-field col s6\">\n              <input\n                id=\"key\"\n                type=\"text\"\n                name=\"key\"\n                onChange={this.handleChange}\n              />\n              <label for=\"key\">Decryption Key</label>\n            </div>\n            <label>Kľúc, podľa ktorého sa dešifruje tvoja správa</label>\n            <br />\n            <input type=\"submit\" value=\"Dešifrovať\" class=\"btn  waves-light\" />\n          </form>\n        </div>\n        <div>\n          <div\n            class=\"card-panel grey lighten-5\"\n            style={{ borderBottom: \"1px solid #62BBB1\" }}\n          >\n            Dešifrovaná správa : {decryptedMessage}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport const Footer = () => {\n  return (\n    <div>\n      <div>\n        <footer\n          className=\"page-footer grey lighten-5\"\n          style={{ color: \"#000\" }}\n        >\n          <div className=\"container\" style={{ textAlign: \"center\" }}>\n            <span>Použité technológie : </span>\n            <a href=\"https://reactjs.org/\">React </a>\n            <a href=\"https://nodejs.org/en/\">NodeJS </a>\n            <a href=\"https://cryptojs.gitbook.io/docs/\">CryptoJS </a>\n            <a href=\"https://materializecss.com/\">Materialize</a>\n          </div>\n          <div class=\"footer-copyright\">\n            <div\n              class=\"container\"\n              style={{ textAlign: \"center\", color: \"#000\" }}\n            >\n              © 2020 Copyright Michal Zaduban, Richard Zaduban\n            </div>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Encryption from \"./Encryption\";\nimport Decryption from \"./Decryption\";\nimport { Footer } from \"./Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h2 style={{ borderBottom: \"1px solid #EE6E73\", textAlign: \"center\" }}>\n          OBIS 2020\n        </h2>\n        <h4 style={{ textAlign: \"center\" }}>Šifrovanie </h4>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-6 col-xs-12\">\n          <h6 style={{ textAlign: \"center\" }}>\n            {\" \"}\n            Vlož správu a kľúč, podľa ktorého sa správa zašifruje{\" \"}\n          </h6>\n          <Encryption />\n        </div>\n        <div className=\"col-lg-6 col-xs-12\">\n          <h6 style={{ textAlign: \"center\" }}>\n            Vlož zašifrovanú správu a kľúč, podľa ktorého bola správa\n            zašifrovaná{\" \"}\n          </h6>\n          <Decryption />\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}